export module Constructor;
import std;

/*
	In C++, constructors are special methods that are automatically called whenever an object of a 
	class is created. A constructor is different from normal functions in following ways: 
	- A constructor has same name as the class itself
	- Don't have return type
	- Automatically called when an object is created.
	- If we do not specify a constructor, C++ compiler generates a default constructor for us 
	  (expects no parameters and has an empty body).
*/
class Employee{
private:
	int empid{};
	double salary{};
public:
	Employee(){
		empid = 2334;
		salary = 34800;

		std::cout << empid << std::endl;
		std::cout << salary << std::endl;
	}
};

void basicConstructor(){
	Employee e;
}



/*
	Types of Constructors in C++
	Constructors can be classified based on the situations they are being used in. 
	There are 4 types of constructors in C++:
	- Default Constructor
	- Parameterized Constructor
	- Copy Constructor
	- Move Constructor
*/
// Default constructor
class Default{
public:
	void display(){
		std::cout << "Default contructor called" << std::endl;
	}
	
};
void defaultConstructor(){
	Default d;
	d.display();
}
/*
	In the above program the class A does not contains any explicitly defined constructor. 
	Hence, The object of the class A is created without any parameters, As the class will 
	use the default constructor generated by the compiler.
*/



// Parameterized Constructor
/*
	Parameterized constructor allow us to pass arguments to constructors. Typically, these 
	arguments help initialize an object's members. To create a parameterized constructor, 
	simply add parameters to it the way you would to any other function. When you define the 
	constructor’s body, use the parameters to initialize the object's members.
*/
class A{
private:
	int val{};
public:
	A(int x){
		val = x;
		std::cout << "Val is: " << val << std::endl;
	}
};
void parameterisedConstructor(){
	A a(6);
}



// Copy constructor
/*
	Copy Constructor
	A copy constructor is a member function that initializes an object using another object of 
	the same class. Copy constructor takes a reference to an object of the same class as an argument.
*/
class AB{
public:
	int value{};

	// Parameterised constructor
	AB(int y){
		value = y;
	}

	// Copy Constructor
	AB(AB& a){
		value = a.value;
	}
};
void copyConstructor(){
	AB a1(20);

	// Creating another object 
	AB a2(a1);
	std::cout << a2.value << std::endl;
}



// Move Constructor
/*
	The move constructor is a recent addition to the family of constructors in C++. It is like 
	a copy constructor that constructs the object from the already existing objects, but 
	instead of copying the object in the new memory, it makes use of move semantics to 
	transfer the ownership of the already created object to the new object without creating extra 
	copies. It can be seen as stealing the resources from other objects.
*/
class MyClass {
private:
	int b;

public:
	// Constructor
	MyClass(int &&a) : b(std::move(a)) {
		std::cout << "Move constructor called!" << std::endl;
	}

	void display() {
		std::cout << b << std::endl;
	}
};

int moveConstructor(){
	int a = 4;
	MyClass obj1(std::move(a));  // Move constructor is called

	obj1.display();
	return 0;
}
/*
	In the above program, MyClass uses a constructor with an rvalue reference (int&&) to 
	move a value into its member using std::move. When an object is created with std::move, 
	the move constructor transfers ownership of resources instead of copying them. 
*/



/*
	Characteristics of Constructors
	- The name of the constructor is the same as its class name.
	- Constructors are mostly declared as public member of the class though they can be 
	  declared as private.
	- Constructors do not return values, hence they do not have a return type.
	- A constructor gets called automatically when we create the object of the class.
	- Multiple constructors can be declared in a single class (it is even recommended like 
	  Rule Of Three, The Rule of Five).
	- In case of multiple constructors, the one with matching function signature will be called.
*/



export int constructor(){
	// basicConstructor();
	// defaultConstructor();
	// parameterisedConstructor();
	// copyConstructor();
	// moveConstructor();
	return 0;
}